

<snippet>
	<content><![CDATA[

//pubic.h
#include <memory>

class PublicClass {
 public:
    PublicClass();
    ~PublicClass();
    void publicMethod();
 private:
    class PImplClass;
    std::unique_ptr<PImplClass> pImpl;
};
//public.cpp

#include <iostream>
#include <string>
#include "public.h"

class PublicClass::PImplClass {
 public:
    void DoPrivateStuff() {
        std::cout << className << "::privateMethod\n";
    }
 private:
    std::string className = "PublicClass";
};

PublicClass::PublicClass(): pImpl(new PImplClass) {}
PublicClass::~PublicClass() = default;

void PublicClass::publicMethod() {
    std::cout << "PublicClass::publicMethod\n";
    pImpl->DoPrivateStuff();
}

// main.cpp
#include "public.h"

int main() {

    PublicClass pub;
    pub.publicMethod();

}

---
#include <memory>
#include <string>
#include <iostream>

// Header:
struct SomeInterface {
    int operation() const;
    SomeInterface();
    SomeInterface(SomeInterface&&) = default;
    ~SomeInterface();
private:    
    struct Implementation;
    std::unique_ptr<Implementation> pimpl_;   
};

// User only depends on SomeInterface, implementations behind
// SomeInterface can be swapped without affecting user.
void user(SomeInterface data) {
    int v = data.operation();
    std::cout << v << "\n";
}

// Remove the -DIMPL_A flag to switch to the other implementation
#ifdef IMPL_A

// Implementation A
struct SomeInterface::Implementation {
    int operation() { return rank; }
    int rank;
};

SomeInterface::~SomeInterface() = default;
SomeInterface::SomeInterface()
  : pimpl_(std::make_unique<SomeInterface::Implementation>(10)) {}

int SomeInterface::operation() const {
    return pimpl_->operation();
}

#else

// Implementation B
struct SomeInterface::Implementation {
    int operation() { return std::stoi(text); }
    std::string text;
};

SomeInterface::~SomeInterface() = default;
SomeInterface::SomeInterface() 
  : pimpl_(std::make_unique<SomeInterface::Implementation>("42")) {}

int SomeInterface::operation() const {
    return pimpl_->operation();
}

#endif

int main() {
    SomeInterface iface;
    user(std::move(iface));
}

g++ -DIMPL_A test2.cpp -std=c++20 // under linux works


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpppimpl</tabTrigger>
	<scope>source.c++</scope>
</snippet>

